import { CLICommandParser, printUsageAndExit } from "./common";

const oneLiner = "Runs prisma commands in the db project";
const keyExamples = `$ ./devops prisma migrate dev`;

const usage = `
${oneLiner}

GENERAL USAGE
    ./devops prisma <command>

    <command> can be any command you normally set prisma for.

SPECIAL generate USAGE
    ./devops prisma generate python
    ./devops prisma generate js
    ./devops prisma generate

    The "generate" command without an argument generates both python and js, separately.
    Since the python client cannot be generated by the javascript runtime due to version mismatch, we override the "prisma generate" command.
    As a result of this override, you cannot invoke --help, --watch, etc.

SPECIAL migrate dev USAGE
    ./devops prisma migrate dev
    ./devops prisma migrate dev --skip-generate

    The "prisma migrate dev" command is overwritten to properly call the "generate" for both js and python,
    unless --skip-generate is provided.

EXAMPLES
    ${keyExamples}
`;

async function run(cmdObj: CLICommandParser) {
  const supportedClients = ["python", "js"];

  if (cmdObj.help || cmdObj.args.length === 0) printUsageAndExit(usage);
  if (cmdObj.args[0] === "generate") {
    const specificClient = cmdObj.args[1];
    if (specificClient && !supportedClients.includes(specificClient))
      printUsageAndExit(usage);

    const clients = specificClient ? [specificClient] : supportedClients;
    const targetsClause = clients.map((x) => `generate-${x}`).join(" ");
    cmdObj
      .executorFromEnv(`bunx nx run-many -t ${targetsClause} -p db`, {
        checkEnvYaml: true,
      })
      .spawn();
  } else if (cmdObj.args[0] === "migrate" && cmdObj.args[1] === "dev") {
    const [_migrate, _dev, ...otherArgs] = cmdObj.args;
    await cmdObj
      .executorFromEnv(
        `bunx nx exec -p db -- bunx prisma migrate dev --skip-generate ${otherArgs.join(
          " "
        )}`,
        { checkEnvYaml: true }
      )
      .spawn();

    if (!otherArgs.includes("--skip-generate")) {
      const targetsClause = supportedClients
        .map((x) => `generate-${x}`)
        .join(" ");
      await cmdObj
        .executorFromEnv(`bunx nx run-many -t ${targetsClause} -p db`, {
          checkEnvYaml: true,
        })
        .spawn();
    }
  } else {
    cmdObj
      .executorFromEnv(
        `bunx nx exec -p db -- bunx prisma ${cmdObj.args.join(" ")}`,
        {
          checkEnvYaml: true,
        }
      )
      .spawn();
  }
}

export default {
  prisma: { oneLiner, keyExamples, run },
};
